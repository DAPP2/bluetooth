// Code generated by chat gpt to try and include BLE within our app
console.log('test 1') // Prints 'test 1' to the console

import React, { useEffect, useState } from 'react'; // Importing the necessary modules and functions from 'react'

const BleDevice = () => {
  const [device, setDevice] = useState(null); // State variable to store the connected BLE device
  const [characteristic, setCharacteristic] = useState(null); // State variable to store the selected characteristic of the BLE device
  const [receivedData, setReceivedData] = useState(''); // State variable to store the received data from the characteristic

  useEffect(() => {
    let bluetoothDevice; // Variable to store the connected Bluetooth device
    let bleCharacteristic; // Variable to store the selected characteristic of the BLE device

    // Function to connect to the BLE device
    const connectToDevice = async () => {
      try {
        const options = {
          acceptAllDevices: true, // Accept any device
          optionalServices: ['YOUR_SERVICE_UUID'], // Specify the UUID of the desired service
        };
        bluetoothDevice = await navigator.bluetooth.requestDevice(options); // Request the user to select a Bluetooth device
        const server = await bluetoothDevice.gatt.connect(); // Connect to the GATT server of the selected device
        const service = await server.getPrimaryService('YOUR_SERVICE_UUID'); // Get the desired service from the server
        const characteristics = await service.getCharacteristics(); // Get all the characteristics of the service
        bleCharacteristic = characteristics[0]; // Get the first characteristic

        setDevice(bluetoothDevice); // Set the connected device to the state variable
        setCharacteristic(bleCharacteristic); // Set the selected characteristic to the state variable

        await bleCharacteristic.startNotifications(); // Start receiving notifications from the characteristic
        bleCharacteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged); // Add an event listener for characteristic value changes
      } catch (error) {
        console.error('Error connecting to BLE device:', error);
      }
    };

    // Event handler for characteristic value changes
    const handleCharacteristicValueChanged = (event) => {
        const value = event.target.value; // Get the value from the event
        const decoder = new TextDecoder('utf-8'); // Create a TextDecoder object to decode the value
        const decodedValue = decoder.decode(value); // Decode the value using UTF-8 encoding
        setReceivedData(decodedValue); // Set the received data to the state variable
    };

    // Connect to the BLE device
    connectToDevice();

    // Clean up function to disconnect from the device when the component is unmounted
    return () => {
      if (bluetoothDevice && bluetoothDevice.gatt.connected) {
        bluetoothDevice.gatt.disconnect(); // Disconnect from the GATT server of the device
      }
    };
  }, []);

  return (
    <div>
      <h1>BLE Device</h1>
      {device && characteristic ? (
        <div>
          <p>Connected to: {device.name}</p>
          <p>Received Data: {receivedData}</p>
        </div>
      ) : (
        <p>Connecting to BLE device...</p>
      )}
    </div>
  );
};

export default BleDevice; // Export the BleDevice component as the default export
